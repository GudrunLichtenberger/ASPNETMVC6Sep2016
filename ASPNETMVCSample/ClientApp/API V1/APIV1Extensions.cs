// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ClientApp;
using ClientApp.Models;
using Microsoft.Rest;

namespace ClientApp
{
    public static partial class APIV1Extensions
    {
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object ApiBookChaptersByIdDelete(this IAPIV1 operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAPIV1)s).ApiBookChaptersByIdDeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiBookChaptersByIdDeleteAsync(this IAPIV1 operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiBookChaptersByIdDeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object ApiBookChaptersByIdGet(this IAPIV1 operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAPIV1)s).ApiBookChaptersByIdGetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiBookChaptersByIdGetAsync(this IAPIV1 operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiBookChaptersByIdGetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='chapter'>
        /// Optional.
        /// </param>
        public static object ApiBookChaptersByIdPut(this IAPIV1 operations, string id, BookChapter chapter = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAPIV1)s).ApiBookChaptersByIdPutAsync(id, chapter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='chapter'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiBookChaptersByIdPutAsync(this IAPIV1 operations, string id, BookChapter chapter = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiBookChaptersByIdPutWithOperationResponseAsync(id, chapter, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        public static IList<BookChapter> ApiBookChaptersGet(this IAPIV1 operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAPIV1)s).ApiBookChaptersGetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<BookChapter>> ApiBookChaptersGetAsync(this IAPIV1 operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ClientApp.Models.BookChapter>> result = await operations.ApiBookChaptersGetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='chapter'>
        /// Optional.
        /// </param>
        public static object ApiBookChaptersPost(this IAPIV1 operations, BookChapter chapter = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IAPIV1)s).ApiBookChaptersPostAsync(chapter);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the ClientApp.IAPIV1.
        /// </param>
        /// <param name='chapter'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ApiBookChaptersPostAsync(this IAPIV1 operations, BookChapter chapter = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ApiBookChaptersPostWithOperationResponseAsync(chapter, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
